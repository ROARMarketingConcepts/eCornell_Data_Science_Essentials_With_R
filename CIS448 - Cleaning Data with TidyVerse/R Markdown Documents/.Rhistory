# Recode day of week to 'Weekday' or 'Weekend'
df1$weekday_or_weekend[df1$day %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")] <- "Weekday"
df1$weekday_or_weekend[df1$day %in% c("Saturday","Sunday")] <- "Weekend"
# Calculate mean number of steps for each time interval on Weekdays and Weekends
mean_steps <- aggregate(df1$steps, by=list(df1$weekday_or_weekend,df1$interval), mean)
names(mean_steps) <- c("Weekday_Weekend","time","steps")
# Sort 'mean_steps' by weekday/weekend and then by time
mean_steps <- mean_steps %>% arrange(Weekday_Weekend, time)
# The 'Weekday_Weekend' column must be converted to a factor variable for plotting
mean_steps$Weekday_Weekend <- as.factor(mean_steps$Weekday_Weekend)
# Create plots
# png("Mean Number of Steps by Time of Day Weekday Weekend.png")
ggplot(mean_steps, aes(x=time, y=steps))+geom_line()+facet_wrap(~Weekday_Weekend,nrow=2)+xlab("Time of Day")+ylab("Mean steps")+ggtitle("Mean Number of Steps by Time of Day")
# dev.off()
View(bigrs)
View(word_list)
demo()
knitr::opts_chunk$set(echo = TRUE)
# eCornell Hex Codes:
crimson = '#b31b1b' #Crimson
lightGray = '#cecece' #lightGray
darkGray = '#606366'
skyBlue = '#92b2c4' #skyblue
gold = '#fbb040' #gold
ecBlack = '#393f47' #ecBlack
# Load the data.
school = read.csv('mrc_table2.csv', header = TRUE, check.names = FALSE)
school = school[,names(school) %in%
c('name', 'type', 'tier', 'tier_name', 'mr_kq5_pq1',
'par_median', 'k_median')]
names(school)[5:7] <- c("mobility_rate", "parent_income", "student_income")
## Calculate the mean parent income for students at highly selective private schools:
school = school[school$tier_name %in% c("Highly selective private", "Highly selective public"),]
par.income.prv = school$parent_income[school$tier_name == 'Highly selective private']
mean(par.income.prv)
## Calculate the mean parent income for students at highly selective public schools.
par.income.pub = school$parent_income[school$tier_name == 'Highly selective public']
mean(par.income.pub)
# Create the boxplot:
boxplot(par.income.prv, par.income.pub, names = c('Highly selective private', 'Highly selective public'), ylab = 'Parent Income (USD)',
main = 'Parent Income: HS private and public schools', col = ecBlack)
# Create a permutation distribution:
set.seed(1)
P = 10000
store_mean_diff = rep(0, P)
for (n in 1:P){
school.perm = school
school.perm$parent_income = sample(school.perm$parent_income, replace = FALSE)
school.perm.prv = school.perm$parent_income[school.perm$tier_name == 'Highly selective private']
school.perm.pub = school.perm$parent_income[school.perm$tier_name == 'Highly selective public']
store_mean_diff[n] = mean(school.perm.prv) - mean(school.perm.pub)
}
# Plot the observed sample statistic on the histogram:
hist(store_mean_diff, breaks = 20, freq = FALSE, col = ecBlack, border = 'white',
xlab = 'Mean Diff of Parent Income',
main = 'Histogram of Parent Income Diff (Permuted Data)')
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
help()
install.packages(c("nycflights13", "gapminder", "Lahman"))
myplot <- mpg
mpg
mpg
# install.packages("tidyverse")
library("tidyverse")
help()
install.packages(c("nycflights13", "gapminder", "Lahman"))
myplot <- load(mpg)
myplot <- load('mpg')
str(mpg)
myplot = mpg
View(myplot)
View(myplot)
myplot <- mpg
setwd("~/Desktop/Machine Learning and Data Analysis/eCornell_Data_Science_Essentials_With_R/CIS448 - Cleaning Data with TidyVerse/R Markdown Documents")
library(tidyverse)
library(utf8)
library(ellipsis)
Credit<- read.csv("credit_cards_v2.csv", stringsAsFactors = F)
head(Credit)
library(tidyverse)
library(utf8)
library(ellipsis)
Credit<- read.csv("credit_cards_v2.csv", stringsAsFactors = F)
head(Credit)
View(Credit)
Credit1 <- filter(Credit, Cards=1)
Credit1 <- filter(Credit, Cards==1)
head(Credit1)
Credit1$CreditUtil <- Credit1$Balance/Credit1$Limit
head(Credit1)
Credit1 %>% group_by(Married) %>% summarize(mean=mean(CreditUtil), sd=sd(CreditUtil))
install.packages("XQuartz")
install.packages("XQuartz")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
# read in the storm data:
storms <- read.csv("storms.csv")
# set the storm category to be a factor:
storms$Category <- factor(storms$Category, levels = -1:5)
# set the measurement date/time to be a factor:
storms$Date <- factor(storms$Date, levels = unique(storms$Date))
View(storms) # Look at the storms data
ggplot()
ggplot(storms, aes(x = TS_diameter, y = Pressure))
ggplot(storms, aes(x = TS_diameter, y = Pressure))+
geom_point()
ggplot(storms, aes(x = TS_diameter, y = Pressure))+
geom_point(size = 4)
theme <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30))
ourTheme <- list(theme, scale_color_manual(values = c('#393f47', '#b31b1b',
'#fbb040', '#92b2c4')))
ggplot(storms, aes(x = TS_diameter, y = Pressure))+
geom_point(size = 4) +
ourTheme
knitr::opts_chunk$set(echo = TRUE)
# 1) Set up the theme used in these videos:
library(ggplot2)
theme <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30))
ourTheme <- list(theme,
scale_color_manual(values = c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')),
scale_fill_manual(values = c('#b31b1b', '#cecece', '#393f47', '#92b2c4', '#fbb040')))
# 2) Load data from the National Oceanic and Atmospheric Administration's
# Atlantic hurricane database and convert variables to factors where necessary:
library(tidyverse)
# read in the storm data:
storms <- read.csv("storms.csv")
# set the storm category to be a factor:
storms$Category <- factor(storms$Category, levels = -1:5)
# set the measurement date/time to be a factor:
storms$Date <- factor(storms$Date, levels = unique(storms$Date))
# look at the storm data
view(storms)
# 3) Filter the data to only use observations for Hurricane Sandy:
sandy <- storms %>% filter(Name == "Sandy")
# 4) Create a data set with observations only for Hurricanes Katrina, Sandy, and Wilma:
sampleStorms <- storms %>% filter(Name %in% c("Katrina", "Sandy", "Wilma"))
head(sampleStorms)
# use geom_bar() for barplots
ggplot(sampleStorms, aes(x = Name)) +
geom_bar(fill = '#b31b1b') +
ourTheme
ggplot(sampleStorms, aes(x = Name, fill = Category)) +
geom_bar() +
ourTheme
ggplot(sampleStorms, aes(x = Name, fill = Category)) +
geom_bar(position = "dodge") +
ourTheme
ggplot(sandy, aes(x = Date, y = Wind, group = 1)) +
geom_line(size = 3) +
ourTheme
library(tidyverse)
library(ellipsis)
storms <- read.csv("storms.csv")
storms$Category <- factor(storms$Category, levels = -1:5) # set the storm category to be a factor
storms$Date <- factor(storms$Date, levels = unique(storms$Date)) # set the measurement date/time to be a factor
sampleStorms <- storms %>%
filter(Name == "Sandy" | Name == "Joaquin" |  Name == "Humberto")
sandy <- sampleStorms %>% filter(Name == "Sandy")
CQ1 <- ggplot(sandy, aes(x = Date, y = Pressure, group=1)) +
geom_line(size = 3)
CQ1
CQ2 <- ggplot(sampleStorms, aes(x = Name, fill = Status)) +
geom_bar()
CQ2
knitr::opts_chunk$set(echo = TRUE)
# 1) Set up the theme used in these videos:
library(ggplot2)
theme <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30))
ourTheme <- list(theme,
scale_color_manual(values = c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')))
# 2) Load data from the National Oceanic and Atmospheric Administration's
# Atlantic hurricane database and convert variables to factors where necessary:
library(tidyverse)
# read in the storm data:
storms <- read.csv("storms.csv")
# set the storm category to be a factor:
storms$Category <- factor(storms$Category, levels = -1:5)
# set the measurement date/time to be a factor:
storms$Date <- factor(storms$Date, levels = unique(storms$Date))
# look at the storm data:
View(storms)
# 3) Filter the data to only use observations for Hurricane Sandy:
sandy <- storms %>% filter(Name == "Sandy")
# 4) Create a data set with observations only for Hurricanes Katrina, Sandy, and Wilma:
sampleStorms <- storms %>%
filter(Name %in% c("Katrina", "Sandy", "Wilma"))
knitr::opts_chunk$set(echo = TRUE)
# 1) Set up the theme used in these videos:
library(ggplot2)
theme <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 20),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30))
ourTheme <- list(theme,
scale_color_manual(values = c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')))
# 2) Load data from the National Oceanic and Atmospheric Administration's
# Atlantic hurricane database and convert variables to factors where necessary:
library(tidyverse)
# read in the storm data:
storms <- read.csv("storms.csv")
# set the storm category to be a factor:
storms$Category <- factor(storms$Category, levels = -1:5)
# set the measurement date/time to be a factor:
storms$Date <- factor(storms$Date, levels = unique(storms$Date))
# look at the storm data:
View(storms)
# 3) Filter the data to only use observations for Hurricane Sandy:
sandy <- storms %>% filter(Name == "Sandy")
# 4) Create a data set with observations only for Hurricanes Katrina, Sandy, and Wilma:
sampleStorms <- storms %>%
filter(Name %in% c("Katrina", "Sandy", "Wilma"))
ggplot(data = sampleStorms, aes(x = TS_diameter, y = Pressure)) +
geom_point(size = 4) +
ourTheme
# use geom_smooth() to add a curve to the scatterplot
# the size (thickness) and color of the line are adjusted to make viewing easier
ggplot(data = sampleStorms, aes(x = TS_diameter, y = Pressure)) +
geom_point(size = 4) +
geom_smooth(se = FALSE, size = 3, color = '#92b2c4') +
ourTheme
ggplot(data = sampleStorms, aes(x = TS_diameter, y = Pressure, color = Name)) +
geom_point(size = 4) +
geom_smooth(se = FALSE, size = 3) +
ourTheme
ggplot(data = sampleStorms, aes(x = TS_diameter, y = Pressure)) +
geom_point(aes(color = Name), size = 4) +
geom_smooth(se = FALSE, size = 3, color = "#92b2c4") +
ourTheme
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# 1) Set up the themes used in these videos:
library(tidyverse)
library(ggplot2)
theme1 <-  theme(plot.margin = margin(6, 6, 6, 6, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47",
fill = NA, size = 2),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30),
strip.text = element_text(size = 20),
panel.spacing = unit(2, "lines"))
ourTheme1 <- list(theme1, scale_color_manual(values =
c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')),
scale_x_continuous(breaks = c(0, 500, 1000),
labels = c(0, 500, 1000)))
theme2 <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 12),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30),
strip.text = element_text(size = 20),
panel.spacing = unit(1, "lines"))
ourTheme2 <- list(theme2, scale_color_manual(values =
c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')),
scale_x_continuous(breaks = c(0, 250, 500, 750, 1000),
labels = c(0, 250, 500, 750, 1000)))
theme3 <-  theme(plot.margin = margin(5, 5, 5, 5, "pt"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(colour = "#393f47", fill = NA, size = 2),
axis.text = element_text(size = 15),
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
plot.title = element_text(face = "bold", size = 30),
strip.text = element_text(size = 20),
panel.spacing = unit(1.3, "lines"))
ourTheme3 <- list(theme3, scale_color_manual(values =
c('#393f47', '#b31b1b', '#fbb040', '#92b2c4')),
scale_x_continuous(breaks = c(0, 500, 1000),
labels = c(0, 500, 1000)),
scale_y_continuous(breaks = c(920, 1000),
labels = c(920, 1000)))
# 2) Load data from the National Oceanic and Atmospheric
# Administration's Atlantic hurricane
# database and convert variables to factors where necessary:
library(tidyverse)
# read in the storm data:
storms <- read.csv("storms.csv")
# set the storm category to be a factor:
storms$Category <- factor(storms$Category, levels = -1:5)
# set the measurement date/time to be a factor:
storms$Date <- factor(storms$Date, levels = unique(storms$Date))
# look at the storm data:
view(storms)
# 3) Filter the data to only use observations for Hurricane Sandy:
sandy <- storms %>% filter(Name == "Sandy")
# 4) Create a data set with observations only for
#    Hurricanes Katrina, Sandy, and Wilma:
sampleStorms <- storms %>%
filter(Name %in% c("Katrina", "Sandy", "Wilma"))
library(tidyverse)
library(ellipsis)
library(utf8)
storms <- read.csv("storms.csv")
storms$Category <- factor(storms$Category, levels = -1:5) # set the storm category to be a factor
storms$Date <- factor(storms$Date, levels = unique(storms$Date)) # set the measurement date/time to be a factor
sandy <- storms %>% filter(Name == "Sandy")
sampleStorms <- storms %>%
filter(Name == "Sandy" | Name == "Joaquin" |  Name == "Humberto"& HU_diameter > 0 )
library(tidyverse)
Credit<- read.csv("credit_cards_v2.csv", stringsAsFactors = F)
head(Credit)
library(tidyverse)
Credit<- read.csv("credit_cards_v2.csv", stringsAsFactors = F)
head(Credit)
library(tidyverse)
Credit<- read.csv("credit_cards_v2.csv", stringsAsFactors = F)
head(Credit)
ggplot(Credit, aes(x = Student, fill = Income)) +
geom_bar()
ggplot(Credit, aes(x = Student, fill = Income)) +
geom_bar() + title("Characteristics of Credit Card Holders")
ggplot(Credit, aes(x = Student, fill = Income)) +
geom_bar() + ggtitle("Characteristics of Credit Card Holders")
ggplot(Credit, aes(x = Student, fill = Income)) +
geom_bar() +
ggtitle("Characteristics of Credit Card Holders") +
theme(plot.title = element_text(hjust=0.5))
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income), size = 4, shape=Student) +
geom_smooth(se = FALSE, size = 3, color = "blue")
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income), size = 4) +
geom_smooth(se = FALSE, size = 3, color = "blue")
group <- as.factor(Credit$Student)
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income), size = 4, size=group) +
geom_smooth(se = FALSE, size = 3, color = "blue")
group <- as.factor(Credit$Student)
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income), size = 4, shape=group) +
geom_smooth(se = FALSE, size = 3, color = "blue")
group <- as.factor(Credit$Student)
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income), size = 2, shape=group) +
geom_smooth(se = FALSE, size = 2, color = "blue")
group <- as.factor(Credit$Student)
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income, shape=group), size = 2) +
geom_smooth(se = FALSE, size = 2, color = "blue")
is_student <- as.factor(Credit$Student)
ggplot(data = Credit, aes(x = Limit, y = Balance)) +
geom_point(aes(color = Income, shape=is_student), size = 2) +
geom_smooth(se = FALSE, size = 2, color = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
langDivLengthen <- read.csv("language_diversity_pl.csv")
langDivWiden <- read.csv("language_diversity_pw.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
langDivLengthen <- read.csv("language_diversity_pl.csv")
langDivWiden <- read.csv("language_diversity_pw.csv")
langDiv1 <- pivot_longer(data = langDivLengthen,
cols = -Measurement,
names_to = "Country",
values_to = "Value")
langDiv1
View(langDivLengthen)
View(langDivWiden)
View(langDivLengthen)
langDiv1 <- pivot_longer(data = langDivLengthen,
cols = -Measurement,
names_to = "Country",
values_to = "Value")
head(langDiv1)
library(tidyverse)
library(ellipsis)
highways1 <- read.csv("state_traffic_data_needs_pivot_longer.csv")
highways2 <- read.csv("state_traffic_data_needs_pivot_wider.csv")
View(highways1)
View(highways2)
library(tidyverse)
langDivLengthen <- read.csv("language_diversity_pl.csv")
head(langDivLengthen)
langDivWiden <- read.csv("language_diversity_pw.csv")
head(langDivWiden)
View(highways1)
View(langDiv1)
View(highways1)
View(highways2)
View(highways1)
View(highways1)
CQ1 <- pivot_longer(data = highways1,
cols = -c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "Expenditures")
head(CQ1)
View(CQ1)
CQ1 <- pivot_longer(data = highways1,
cols = -c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "State")
head(CQ1)
View(CQ1)
View(CQ1)
CQ1 <- pivot_longer(data = highways1,
cols = -Y2015,-Y2016,-Y2017,
names_to = "Year",
values_to = "State")
CQ1 <- pivot_longer(data = highways1,
cols = -c(Y2015,Y2016,Y2017),
names_to = "State",
values_to = "Year")
head(CQ1)
View(CQ1)
View(CQ1)
View(highways1)
CQ1 <- pivot_longer(data = highways1,
cols = -c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "Year")
CQ1 <- pivot_longer(data = highways1,
names_to = "Year",
values_to = "Expenditures")
CQ1 <- pivot_longer(data = highways1,
cols = c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "Expenditures")
head(CQ1)
View(CQ1)
CQ1 <- pivot_longer(data = highways1,
cols = -c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "Expenditures")
head(CQ1)
View(CQ1)
CQ1 <- pivot_longer(data = highways1,
cols = c(Y2015,Y2016,Y2017),
names_to = "Year",
values_to = "Expenditures")
head(CQ1)
CQ1 <- pivot_longer(data = highways1,
cols = c(Y2015,Y2016,Y2017),
names_to = "Year")
head(CQ1)
View(CQ1)
View(highways2)
View(highways2)
CQ2 <- pivot_wider(data = highways2,
names_from = "Type",
values_from = 'Number')
View(CQ2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
langDiv <- read.csv("language_diversity.csv")
library(tidyverse)
langDiv <- read.csv("langDiv.csv")
head(langDiv)
gdp <- read.csv("country_gdp_data.csv", header = TRUE)
head(gdp)
# join the langDiv and gdp data sets by the Country variable
# keep all rows and all columns from both data sets
full_join(x = langDiv, y = gdp, by = "Country")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
langDiv <- read.csv("langDiv.csv")
head(langDiv)
gdp <- read.csv("country_gdp_data.csv", header = TRUE)
head(gdp)
# join the langDiv and gdp data sets by the Country variable
# keep all rows and all columns from both data sets
full_join(x = langDiv, y = gdp, by = "Country")
# Note: If the variable specifying the country name were different across the two data frames (for instance, one data frame had a "Country" variable and the other had a "CountryName" variable), then we would provide both variable names to the full_join() function.
# Example: if "Country" in langDiv and "CountryName" in gdp, use full_join(x = langDiv, y = gdp, by = c("Country" = "CountryName"))
# join the langDiv and gdp data sets by the Country variable
# keep all rows from gdp and all columns from both data sets
right_join(x = langDiv, y = gdp, by = "Country")
inner_join(x = langDiv, y = gdp, by = "Country")
